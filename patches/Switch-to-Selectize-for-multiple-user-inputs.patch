commit b9755b59a86a22566ab1ee75e2d8d2d01f8fdc6f
Author: sunnavy <sunnavy@bestpractical.com>
Date:   Thu Apr 18 05:00:28 2019 +0800

    Switch to Selectize for multiple user inputs
    
    It eases the task to delete/reorder emails in inputs. Besides that, we
    also enhanced it so people can easily move those emails from an input to
    another via drag/drop.

diff --git a/share/html/Ticket/Elements/UpdateCc b/share/html/Ticket/Elements/UpdateCc
index a1fa20a364..bd046c1e3d 100644
--- a/share/html/Ticket/Elements/UpdateCc
+++ b/share/html/Ticket/Elements/UpdateCc
@@ -49,7 +49,6 @@
 
 <tr><td class="label"><&|/l&>One-time Cc</&>:</td><td><& /Elements/EmailInput, Name => 'UpdateCc', Size => undef, Default => $ARGS{UpdateCc}, AutocompleteMultiple => 1 &>
 <input type="hidden" id="UpdateIgnoreAddressCheckboxes" name="UpdateIgnoreAddressCheckboxes" value="0">
-        <br />
 
 %if (scalar @one_time_Ccs) {
 %   if ($hide_cc_suggestions) {
@@ -79,7 +78,7 @@
 </div>
 %}
 </td></tr>
-<tr><td class="label"><&|/l&>One-time Bcc</&>:</td><td><& /Elements/EmailInput, Name => 'UpdateBcc', Size => undef, Default => $ARGS{UpdateBcc}, AutocompleteMultiple => 1 &><br />
+<tr><td class="label"><&|/l&>One-time Bcc</&>:</td><td><& /Elements/EmailInput, Name => 'UpdateBcc', Size => undef, Default => $ARGS{UpdateBcc}, AutocompleteMultiple => 1 &>
 %if (scalar @one_time_Ccs) {
 %   if ($hide_cc_suggestions) {
         <a href="#" class="ToggleSuggestions" data-hide-label="<% $hide_label %>" data-show-label="<% $show_label %>">
diff --git a/share/static/js/autocomplete.js b/share/static/js/autocomplete.js
index cd8ab2b0d4..5fc5b75e8c 100644
--- a/share/static/js/autocomplete.js
+++ b/share/static/js/autocomplete.js
@@ -8,6 +8,35 @@ window.RT.Autocomplete.Classes = {
     Queues: 'queues'
 };
 
+Selectize.define('rt_drag_drop', function(options) {
+    this.require('drag_drop');
+    var self = this;
+    self.setup = (function() {
+        var original = self.setup;
+        return function() {
+            original.apply(this, arguments);
+            self.$control.sortable('option', 'connectWith', '.selectize-input');
+            self.$control.on('sortreceive', function(e, ui) {
+                var input = jQuery(e.target).parent().prev('input');
+                var self = input.selectize()[0].selectize;
+                var value = ui.item.attr('data-value');
+                self.createItem(value, false);
+                self.getItem(value).children('span').text(ui.item.children('span').text());
+                self.getItem(value).insertBefore(ui.item);
+                ui.item.remove();
+                self.setCaret(self.items.length);
+            });
+            self.$control.on('sortremove', function(e, ui) {
+                var input = jQuery(e.target).parent().prev('input');
+                var self = input.selectize()[0].selectize;
+                var value = ui.item.attr('data-value');
+                self.removeItem(value, true);
+                self.trigger('item_remove', value, ui.item);
+            });
+        };
+    })();
+});
+
 window.RT.Autocomplete.bind = function(from) {
 
     jQuery("input[data-autocomplete]", from).each(function(){
@@ -18,6 +47,62 @@ window.RT.Autocomplete.bind = function(from) {
         if (!what || !window.RT.Autocomplete.Classes[what])
             return;
 
+        if (what === 'Users' && input.is('[data-autocomplete-multiple]')) {
+            input.selectize({
+                plugins: ['remove_button', 'restore_on_backspace', 'rt_drag_drop'],
+                valueField: 'value',
+                labelField: 'label',
+                searchField: ['label', 'value'],
+                create: true,
+                closeAfterSelect: true,
+                maxItems: input.is('[data-autocomplete-multiple]') ? null : 1,
+                allowEmptyOption: false,
+                openOnFocus: false,
+                selectOnTab: true,
+                placeholder: input.attr('placeholder'),
+                render: {
+                    option_create: function(data, escape) {
+                        return '<div class="create"><strong>' + escape(data.input) + '</strong></div>';
+                    },
+                    option: function(data, escape) {
+                        return '<div class="option">' + escape(data.label) + '</div>';
+                    },
+                    item: function(data, escape) {
+                        return '<div class="item">' + '<span>' + escape(data.label) + '</span></div>';
+                    }
+                },
+                onItemRemove: function(value) {
+                    // We do not want dropdown to show on removing items, but there is no such option.
+                    // Here we temporarily lock the selectize to achieve it.
+                    var self = input[0].selectize;
+                    self.lock();
+                    setTimeout( function() {
+                        self.unlock();
+                    },100);
+                },
+                load: function(input, callback) {
+                    if (!input.length) return callback();
+                    jQuery.ajax({
+                        url: RT.Config.WebPath + '/Helpers/AutoComplete/Users',
+                        type: 'GET',
+                        dataType: 'json',
+                        data: {
+                            delim: ',',
+                            term: input,
+                            return: wants
+                        },
+                        error: function() {
+                            callback();
+                        },
+                        success: function(res) {
+                            callback(res);
+                        }
+                    });
+                }
+            });
+            return;
+        }
+
         // Don't re-bind the autocompleter
         if (input.data("ui-autocomplete"))
             return;
diff --git a/share/static/js/util.js b/share/static/js/util.js
index d5bf84562a..f2fe9cad3f 100644
--- a/share/static/js/util.js
+++ b/share/static/js/util.js
@@ -213,6 +213,16 @@ function checkboxToInput(target,checkbox,val){
         tar.val(tar.val().replace(val,''));
     }
     jQuery('#UpdateIgnoreAddressCheckboxes').val(true);
+
+    var selectize = tar[0].selectize;
+    if ( selectize ) {
+        if( box.prop('checked') ) {
+            selectize.createItem(val, false);
+        }
+        else {
+            selectize.removeItem(val, true);
+        }
+    }
     tar.change();
 }
 
